---
title: Budgeting Database Implementation
author: Bryan Montecino & Corbin Nash
format:
    html:
        theme: minty
        toc: true
        html-math-method: katex
        embed-resources: true
        copy-code: true
        css: styles.css
---

# GitHub Repository

* <https://github.com/cmsc-vcu/cmsc508-fa2023-prj-personal-financial-budgeting>

Access the repository above to see code.

# Project overview and key deliverables

Our project centers on developing a user-friendly database system that empowers individuals to take control of their personal finances, offering tools for income tracking, expense management and budget planning.

# Problem description

## 1) Problem domain 
Problem domain is finance management, where the project aims to assist users in the management of their personal finances. The project will keep track of the sources of a user's income (such as income from a job, side hustles, or gifts) and expenses (such as groceries, hobbies, and entertainment). The project will allow the user to easily set a budget, and compare how much they would like to keep each month compared to expected income and spending. Overall it addresses a crucial aspect of people's lives by providing a tool to effectively manage personal finance, making it a valuable resource for users seeking financial stability and control.

## 2) Need
The development of this database is necessary to provide users with a reliable, secure and scalable platform to manage their finances effectively. Along with helping to budget, it would help to reduce stress that comes from managing money. It will offer a structured and streamlined approach to budgeting, expense tracking, and income management, ultimately helping users gain control over their financial well-being and work towards their financial goals.

## 3) Context, scope and perspective
Anyone can use this database to help manage financials, though it will be most helpful for those with an active income. It will represent the perspective of the user, providing a user-friendly interface to input and access financial data easily.

## 4) User roles and use cases

#### User (Individual User)
Needs
: 
* Manage their personal finances, including income and expenses.
* Set and customize budgets.
* Track financial progress and view insights.

Use Cases
: 
* Log in to the system to access their financial dashboard.
* Input income and expense data, categorize transactions, and set budgets.
* View financial summaries, expense breakdowns, and progress reports.
* Make adjustments to their budget based on the provided information.

#### Administrator
Needs
: 
* Manage the technical aspects of the database.
* Monitor system performance.
* Ensure data security and compliance.

Use Cases
: 
* Perform routine database maintenance and backup tasks.
* Monitor system performance and address any technical issues.
* Manage user access and permissions.
* Ensure data privacy and security compliance

#### Bank (External Data Retrieval)
Needs
: 
* Access transaction data for account holders who have given permission.

Use Cases
:
* Connect to the database through secure APIs or integration methods.
* Retrieve transaction data for account holders who have authorized access.
* Update the database with the latest financial data for mutual customers.

#### Financial Advisor (Upon Request)
Needs
: 
* Access to multiple client accounts.
* Monitor and provide financial advice to clients.
* Generate financial reports for clients.

Use Cases
: 
* Log in to a dashboard with access to all client accounts.
* Review and analyze client financial data.
* Provide financial recommendations and set up budgets for clients.
* Generate reports to discuss with clients during financial consultations.

## 5) Security and Privacy
User authentication
: Implementing user identity verification through strong user authentication methods, such as username and password combinations, two-factor authentication (2FA), or biometric authentication, to ensure that only authorized users can access the system.

Data Encryption
: Utilize secure communication protocols (such as HTTPS) to encrypt data transmitted between the user's device and the database server to prevent interception.
Encrypt sensitive data stored in the database to protect it from unauthorized access in case of a breach or physical server compromise

Access Controls
: Role-Based Access Control (RBAC): Implement to define and enforce user roles and their associated permissions. Users should only have access to the parts of the database that are relevant to their role.

Data Segmentation
: Segregate financial data, ensuring that users can only access their own data. This prevents users from viewing or modifying others' financial information.
Password Policies: Enforce strong password policies, regular password changes and complexity requirements.

*All these items above guide the database design, the data to be collected, how it will be stored, who has access to it, and how it will be used to support decision making.*

# Database design

## 6) Entity-relationship diagram (ERD) 

### Crow's Foot Notation
```{dot}
graph ER {
    layout=neato;
    node [shape=box]; User, Budget, Actuals, Transaction
    node [shape=ellipse]; userID, budgetID, expectedExpense, expectedIncome, difference, transactionID, realExpense, realIncome, comparison, source
    node [shape=diamond,style=filled,color=lightgrey]; manages, compares_to, consists_of, creates

    User -- creates [label = "1",len=1.3]
    User -- manages [label = "1"]    
    Budget -- manages [label = "n",len=1.3]
    Budget -- compares_to [label = "1",len=1.3]
    Actuals -- compares_to [label = "1", len=1.3]
    Actuals -- consists_of [label = "1"]
    Transaction -- consists_of [label = "n",len=1.4]
    Transaction -- creates [label = "n",len=1.3]

    User -- userID

    Budget -- budgetID [len=1.5]
    Budget -- expectedExpense [len=1.5]
    Budget -- expectedIncome [len=1.5]

    Actuals -- realExpense [len=1.5]
    Actuals -- realIncome[len=1.25]
    Actuals -- comparison [len=1.5]

    Transaction -- source [len=1.4]
    Transaction -- transactionID [len=1.4]
    Transaction -- difference [len=1.4]
}
```

### Chen Notation
```{mermaid}
erDiagram
USER ||--|| BUDGET: MANAGES
USER ||--o{ TRANSACTION: CREATES
TRANSACTION }|--|| ACTUALS: ADMINISTERS
ACTUALS ||--|| BUDGET: COMPARES_TO


USER {
string userID
string budget
string name
string transaction
}
BUDGET {
string budgetID
double pricegain
string source
string actual
string timeperiod
}
ACTUALS {
string actualID
string transaction
string budget
string timeperiod
}
TRANSACTION {
string transID
double pricegain
string source
string actual
string date
}
```

#### Relationship of User to Budget = 1:many
Having the User - Budget relation be a *1:many* relationship means that if a group were to use this database to manage expenses, they would need to be under a shared user. 

## 7) Relational schemas
Listing of relations, their attributes, types, domain, and constraints, identification of the primary key and foreign keys and other constraints.

* User Relation:

| Attribute   | Type   | Domain      | Constraints                 | Primary key | Foreign key |
|-------------|--------|-------------|-----------------------------|-------------|-------------|
| userID      | String | All strings | Must not be null            | yes         | no          |
| budget      | String | All strings | Must not have duplicate IDs | no          | yes         |
| name        | String | All strings | Must not be null            | no          | no          |
| transaction | String | All Strings | Must not have duplicate IDs | no          | yes         |

* Budget Relation:

| Attribute  | Type   | Domain                                        | Constraints                 | Primary key | Foreign key |
|------------|--------|-----------------------------------------------|-----------------------------|-------------|-------------|
| budgetID   | String | All strings                                   | must not be null            | yes         | no          |
| Price/Gain | Double | All real numbers with no more than 2 decimals | none                        | no          | no          |
| Source     | String | One of the following: Entertainment, Transportation, Necessities, Medical, Job, Gifts, Side Hustle, or Other | must not be null | no | no |
| Actual     | String | All strings                                   | must not have duplicate IDs | no          | yes         |
| TimePeriod | String | A string consisting of either a range of dates: “mm/dd/yy - mm/dd/yy,” or a discrete amount of time ie “1 month” | none | no | no |

* Actual Relation:

| Attribute   | Type   | Domain                                        | Constraints                 | Primary key | Foreign key |
|-------------|--------|-----------------------------------------------|-----------------------------|-------------|-------------|
| actualID    | String | All strings                                   | must not be null            | yes         | no          |
| transaction | String | All strings                                   | must not have duplicate Ids | no          | yes         |
| budget      | String | All strings                                   | must not have duplicate Ids | no          | yes         |
| TimePeriod  | String | A string consisting of either a range of dates: “mm/dd/yy - mm/dd/yy,” or a discrete amount of time ie “1 month” | none | no | no |

* Transaction Relation:

| Attribute  | Type   | Domain                                        | Constraints                 | Primary key | Foreign key |
|------------|--------|-----------------------------------------------|-----------------------------|-------------|-------------|
| transID    | String | All strings                                   | must not be null            | yes         | no          |
| Price/Gain | Double | All real numbers with no more than 2 decimals | none                        | no          | no          |
| Source     | String | One of the following: Entertainment, Transportation, Necessities, Medical, Job, Gifts, Side Hustle, or Other | must not be null | no | no |
| Actual     | String | All strings                                   | must not have duplicate IDs | no          | yes         |
| Date       | String | A string consisting of a discrete date: “mm/dd/yy” | none                   | no           | no         |

## 8) Functional Dependencies and Normalization

User
: The only FD here is userID -> name. To get this relation into BCNF, we would need 2 relations: one mapping userID -> name, and the other with userID, transaction, and budget

Budget
: There is only one FD here again and that is Source -> Price/Gain. For BCNF we would need a relation with Source -> Price/Gain, and another with BudgetID, Source, Actual, TimePeriod

Transaction
: This relation has no FDs and is already in BCNF with a primary key of TransID

Actual
: This transaction also has no FDs and is already in BCNF with a primary key of ActualID

## 9) Specific queries
Given the context, scope, and perspective, the team came up with 20 distinct questions that the database can help answer.

1) Display the source I spent the most money on
2) Display where I earned the most money
3) What is the difference between my budget and what I actually earned/spent
4) On what day of the week do I spend the most money
5) On average, how much money do I make outside of my main job per day
6) How much money did I make/spent on gifts this past Christmas
7) Display the difference between how much I made and how much I spent this past year
8) Display the difference between what I spent this week and how much I plan to spend next week
9) On average, how long do I go between spending medical bills
10) What is the difference between what I spend on transportation and what I earn on work days
11) What was the difference between all expenses, minus gifts and entertainment, and all sources of income this past month
12) What is the average difference between what I plan to spend and what I actually spend
13) What is the source with the biggest difference between actual and budget
14) What is the difference between what I spent and what I earned last month
15) What month this past year did I have the largest difference between what I earned and what I spent
16) On average, what week of the year do I have the largest negative difference between budget and actual
17) What is the longest time period I was able to keep on budget or better
18) How many monetary gifts did I receive this past holiday season
19) What is the average number of the other sources
20) How large is the difference between my current budget and my actual

## 10) Sample Data
Sample data for each relation your design documented above

Link to DDL code:
- <https://github.com/cmsc-vcu/cmsc508-fa2023-prj-personal-financial-budgeting/blob/main/reports/deliver7/deliver7-ddl.sql>

* User Relation:

| userID | budget       | name             | transaction                |
|--------|--------------|------------------|----------------------------|
| U1     | B1, B2       | John Doe         | T1, T2, T3                 |
| U2     | B3           | Jane Smith       | T4, T5                     |
| U3     | B4, B5       | Robert Johnson   | T6, T7                     |
| U4     | B6, B7       | Emily Brown      | T8, T9                     |
| U5     | B8, B9       | Michael Lee      | T10, T11                   |
| U6     | B10          | Phillip Castor   | T12, T13, T14, T15         |
| U7     | B11, B12, B13 | Amelia Turner    | T16, T17, T18, T19, T20, T21, T22, T23 |
| U8     | B14          | Benjamin Martinez| T24, T25, T26, T27, T28, T29|
| U9     | B15          | Chloe Murphy     |                            |
| U10    | B16, B17, B18| Dylan Anderson   | T30, T31, T32, T33, T34    |
| U11    | B19, B20     | Emma Bennett     | T35, T36, T37, T38, T39, T40|
| U12    | B21, B22, B23| Gavin Parker     | T41, T42, T43, T44, T45    |
| U13    | B24          | Isabella Ross    | T46, T47, T48, T49, T50    |
| U14    | B25          | Jackson Mitchell | T51, T52                   |
| U15    |              | Olivia Jenkins   |                            |


* Budget Relation:

| budgetID | priceGain | source        | actual         | timePeriod |
|----------|-----------|---------------|----------------|------------|
| B1       | 3000.50   | Job           | A1, A2         | 2023-01    |
| B2       | 150.00    | Gifts         | A3, A4         | 2023-02    |
| B3       | 500.75    | Side Hustle   | A5, A6         | 2023-03    |
| B4       | 1200.25   | Entertainment | A7, A8         | 2023-01    |
| B5       | 600.00    | Transportation| A9, A10        | 2023-02    |
| B6       | 2500.00   | Necessities   | A11, A12       | 2023-03    |
| B7       | 750.50    | Medical       | A13, A14       | 2023-01    |
| B8       | 400.75    | Job           | A15, A16       | 2023-02    |
| B9       | 100.00    | Entertainment | A17, A18       | 2023-03    |
| B10      | 150.25    | Entertainment | A19, A20       | 2023-03    |
| B11      | 75.50     | Transportation| A21, A22       | 2023-04    |
| B12      | 200.00    | Necessities   | A23, A24       | 2023-05    |
| B13      | 30.00     | Medical       | A25, A26       | 2023-06    |
| B14      | 120.75    | Job           | A27, A28       | 2023-07    |
| B15      | 50.50     | Gifts         | A29, A30       | 2023-08    |
| B16      | 80.00     | Side Hustle   | A31, A32       | 2023-09    |
| B17      | 95.25     | Other         | A33, A34       | 2023-10    |
| B18      | 110.50    | Entertainment | A35, A36       | 2023-11    |
| B19      | 45.75     | Transportation| A37, A38       | 2023-12    |
| B20      | 180.00    | Necessities   | A39, A40       | 2024-01    |
| B21      | 25.00     | Medical       | A41, A42       | 2024-02    |
| B22      | 135.75    | Job           | A43, A44       | 2024-03    |
| B23      | 60.50     | Gifts         | A45, A46       | 2024-04    |
| B24      | 75.00     | Side Hustle   | A47, A48       | 2024-05    |
| B25      | 90.25     | Other         | A49, A50       | 2024-06    |

* Actual Relation:

| actualID | transaction      | budget | timePeriod |
|----------|-------------------|--------|------------|
| A1       | T1, T2            | B1     | 2023-01    |
| A2       | T3, T4            | B2     | 2023-02    |
| A3       | T5, T6            | B3     | 2023-03    |
| A4       | T7, T8            | B4     | 2023-01    |
| A5       | T9, T10           | B5     | 2023-02    |
| A6       | T11, T12          | B6     | 2023-03    |
| A7       | T13, T14          | B7     | 2023-01    |
| A8       | T15, T16          | B8     | 2023-02    |
| A19      | T12, T13          | B10    | 2023-03    |
| A20      | T14, T15          | B10    | 2023-03    |
| A21      | T16, T17, T18     | B11    | 2023-04    |
| A22      |                   | B11    | 2023-04    |
| A23      | T19               | B12    | 2023-05    |
| A24      | T20, T21          | B12    | 2023-05    |
| A25      | T22               | B13    | 2023-06    |
| A26      | T23               | B13    | 2023-06    |
| A27      | T24,              | B14    | 2023-07    |
| A28      | T25, T26, T27, T28, T29 | B14 | 2023-07 |
| A29      |                   | B15    | 2023-08    |
| A30      |                   | B15    | 2023-08    |
| A31      | T30               | B16    | 2023-09    |
| A32      |                   | B16    | 2023-09    |
| A33      | T31               | B17    | 2023-10    |
| A34      | T32               | B17    | 2023-10    |
| A35      |                   | B18    | 2023-11    |
| A36      | T33, T34          | B18    | 2023-11    |
| A37      | T35, T36          | B19    | 2023-12    |
| A38      | T37, T38          | B19    | 2023-12    |
| A39      | T39, T40          | B20    | 2024-01    |
| A40      |                   | B20    | 2024-01    |
| A41      |                   | B21    | 2024-02    |
| A42      | T41               | B21    | 2024-02    |
| A43      | T42               | B22    | 2024-03    |
| A44      | T43               | B22    | 2024-03    |
| A45      |                   | B23    | 2024-04    |
| A46      | T44, T45          | B23    | 2024-04    |
| A47      | T46, T47          | B24    | 2024-05    |
| A48      | T48, T49, T50     | B24    | 2024-05    |
| A49      | T51               | B25    | 2024-06    |
| A50      | T52               | B25    | 2024-06    |


* Transaction Relation:

| transID | priceGain | source         | actual | date       |
|---------|-----------|----------------|--------|------------|
| T1      | 100.50    | Groceries      | A1     | 2023-01-01 |
| T2      | 50.00     | Entertainment  | A2     | 2023-02-01 |
| T3      | 75.25     | Transportation | A3     | 2023-03-01 |
| T4      | 120.00    | Hobbies        | A4     | 2023-01-02 |
| T5      | 40.50     | Groceries      | A5     | 2023-02-02 |
| T6      | 20.00     | Entertainment  | A6     | 2023-03-02 |
| T7      | 150.75    | Medical        | A7     | 2023-01-03 |
| T8      | 300.00    | Groceries      | A8     | 2023-02-03 |
| T9      | 50.50     | Hobbies        | A9     | 2023-03-03 |
| T10     | 75.25     | Entertainment  | A19    | 2023-03-03 |
| T11     | 30.75     | Transportation | A19    | 2023-03-03 |
| T12     | 120.00    | Entertainment  | A20    | 2023-03-03 |
| T13     | 45.50     | Transportation | A20    | 2023-03-03 |
| T14     | 100.25    | Necessities    | A21    | 2023-04-03 |
| T15     | 60.00     | Entertainment  | A21    | 2023-04-03 |
| T16     | 85.75     | Job            | A22    | 2023-04-03 |
| T17     | 20.50     | Job            | A22    | 2023-04-03 |
| T18     | 45.00     | Gifts          | A22    | 2023-04-03 |
| T19     | 80.25     | Side Hustle    | A23    | 2023-05-03 |
| T20     | 25.50     | Medical        | A24    | 2023-05-03 |
| T21     | 110.75    | Gifts          | A24    | 2023-05-03 |
| T22     | 30.00     | Entertainment  | A25    | 2023-06-03 |
| T23     | 55.25     | Medical        | A26    | 2023-06-03 |
| T24     | 70.50     | Gifts          | A27    | 2023-07-03 |
| T25     | 90.25     | Side Hustle    | A28    | 2023-07-03 |
| T26     | 40.75     | Job            | A28    | 2023-07-03 |
| T27     | 65.00     | Job            | A28    | 2023-07-03 |
| T28     | 95.75     | Job            | A28    | 2023-07-03 |
| T29     | 35.50     | Job            | A28    | 2023-07-03 |
| T30     | 60.75     | Gifts          | A28    | 2023-07-03 |
| T31     | 75.00     | Side Hustle    | A29    | 2023-08-03 |
| T32     | 85.25     | Other          | A29    | 2023-08-03 |
| T33     | 110.50    | Entertainment  | A31    | 2023-09-03 |
| T34     | 45.75     | Transportation | A31    | 2023-09-03 |
| T35     | 180.00    | Necessities    | A36    | 2023-11-03 |
| T36     | 25.00     | Medical        | A36    | 2023-11-03 |
| T37     | 135.75    | Job            | A36    | 2023-11-03 |
| T38     | 60.50     | Gifts          | A36    | 2023-11-03 |
| T39     | 75.00     | Side Hustle    | A37    | 2023-12-03 |
| T40     | 90.25     | Other          | A38    | 2023-12-03 |
| T41     | 110.50    | Entertainment  | A39    | 2024-01-03 |
| T42     | 45.75     | Transportation | A40    | 2024-01-03 |
| T43     | 180.00    | Necessities    | A41    | 2024-02-03 |
| T44     | 25.00     | Medical        | A42    | 2024-02-03 |
| T45     | 135.75    | Job            | A43    | 2024-03-03 |
| T46     | 60.50     | Gifts          | A44    | 2024-03-03 |
| T47     | 75.00     | Side Hustle    | A45    | 2024-04-03 |
| T48     | 90.25     | Other          | A46    | 2024-04-03 |
| T49     | 110.50    | Entertainment  | A47    | 2024-05-03 |
| T50     | 45.75     | Transportation | A48    | 2024-05-03 |
| T51     | 90.00     | Other          | A49    | 2024-06-03 |
| T52     | 50.50     | Hobbies        | A50    | 2024-06-03 |

## 11) Draft Project schedule

- What needs to happen between now and then to ensure that you get this whole thing done? 
```{mermaid}
gantt
  dateFormat YYYY-MM-DD
  title Financial Database Project Schedule
  Initial milestone:done, milestone, m1, 2023-08-22, 2m
  section Phase 1
  Student introductions:done, a1, 2023-08-22, 2023-08-23
  Team formation:done, a2, 2023-08-23, 2023-08-27
  Team setup and topic submission:done, a3, 2023-09-09, 2023-09-15
  Phase 1 Submission:active, a4, 2023-10-09, 2023-10-15
  Project status report 1":active a5, 2023-10-20, 2023-10-30
```

```{mermaid}
gantt
  dateFormat YYYY-MM-DD
  title Financial Database Project Schedule
  section Development
  Choose database management system:active, 2023-10-15, 2023-10-20
  Build the database:active, 2023-10-20, 2023-10-25
  Develop the user interface for budgeting:active, 2023-10-25, 2023-11-05

  section Testing
  Implement data input and validation:active, 2023-11-05, 2023-11-10
  Conduct unit testing:active, 2023-11-10, 2023-11-20
  Perform integration testing:active, 2023-11-30

  section User Training
  Prepare user manuals and documentation :active, 2023-11-30, 2023-12-05

  section Deployment
  Prepare the database for production use:active, 2023-12-05, 2023-12-10
  Deploy the system to the production environment :done, 2023-12-09

  section Project Completion
  Submit the Phase 2 submission:active, 2023-12-11,2023-12-12

  Final milestone:active, milestone, m1, 2023-12-13, 2m
```

## 12) API definition
Database is to be accessible from the server through a RESTful API. What is your API definition? What are the various ways to get data? This should be documented so that someone wanting to leverage your database can understand how to access it.

The following outlines the RESTful API for accessing and manipulating data in the Finance Database. 

* The API allows clients to perform Create, Read, Update, and Delete (CRUD) operations on various financial entities including Users, Budgets, Actuals, and Transactions.

### Base URL

The base URL for the API is:
- <http://api.yourfinancedb.com/>


This URL is the root address for all API requests.

### Authentication

This API requires authentication for access. Use the following method for authentication:

- **Method**: Basic Authentication
- **Credentials**: username and password

### Endpoints

#### Users

##### Get All Users
- **URL**: `/users`
- **Method**: `GET`
- **Description**: Retrieve a list of all users.
- **Response**: A JSON array of user objects.

##### Create a New User
- **URL**: `/users`
- **Method**: `POST`
- **Description**: Create a new user.
- **Data Parameters**: `{ "userID": "string", "name": "string" }`
- **Response**: The created user object.

##### Update a User
- **URL**: `/users/<userID>`
- **Method**: `PUT`
- **Description**: Update an existing user.
- **URL Parameters**: `userID` is the ID of the user to update.
- **Data Parameters**: `{ "name": "string" }`
- **Response**: The updated user object.

##### Delete a User
- **URL**: `/users/<userID>`
- **Method**: `DELETE`
- **Description**: Delete a user.
- **URL Parameters**: `userID` is the ID of the user to delete.
- **Response**: A confirmation message.

#### Budgets

##### Get All Budgets
- **URL**: `/budgets`
- **Method**: `GET`
- **Description**: Retrieve a list of all budgets.
- **Response**: A JSON array of budget objects.

##### Create a New Budget
- **URL**: `/budgets`
- **Method**: `POST`
- **Description**: Create a new budget.
- **Data Parameters**: `{ "budgetID": "string", ... }`
- **Response**: The created budget object.

##### Update a Budget
- **URL**: `/budgets/<budgetID>`
- **Method**: `PUT`
- **Description**: Update an existing budget.
- **URL Parameters**: `budgetID` is the ID of the budget to update.
- **Data Parameters**: `{ ... }`
- **Response**: The updated budget object.

##### Delete a Budget
- **URL**: `/budgets/<budgetID>`
- **Method**: `DELETE`
- **Description**: Delete a budget.
- **URL Parameters**: `budgetID` is the ID of the budget to delete.
- **Response**: A confirmation message.

#### Actuals

##### Get All Actuals
- **URL**: `/actuals`
- **Method**: `GET`
- **Description**: Retrieve a list of all actuals.
- **Response**: A JSON array of actual objects.

##### Create a New Actual
- **URL**: `/actuals`
- **Method**: `POST`
- **Description**: Create a new actual.
- **Data Parameters**: `{ "actualID": "string", ... }`
- **Response**: The created actual object.

##### Update an Actual
- **URL**: `/actuals/<actualID>`
- **Method**: `PUT`
- **Description**: Update an existing actual.
- **URL Parameters**: `actualID` is the ID of the actual to update.
- **Data Parameters**: `{ ... }`
- **Response**: The updated actual object.

##### Delete an Actual
- **URL**: `/actuals/<actualID>`
- **Method**: `DELETE`
- **Description**: Delete an actual.
- **URL Parameters**: `actualID` is the ID of the actual to delete.
- **Response**: A confirmation message.

#### Transactions

##### Get All Transactions
- **URL**: `/transactions`
- **Method**: `GET`
- **Description**: Retrieve a list of all transactions.
- **Response**: A JSON array of transaction objects.

##### Create a New Transaction
- **URL**: `/transactions`
- **Method**: `POST`
- **Description**: Create a new transaction.
- **Data Parameters**: `{ "transID": "string", ... }`
- **Response**: The created transaction object.

##### Update a Transaction
- **URL**: `/transactions/<transID>`
- **Method**: `PUT`
- **Description**: Update an existing transaction.
- **URL Parameters**: `transID` is the ID of the transaction to update.
- **Data Parameters**: `{ ... }`
- **Response**: The updated transaction object.

##### Delete a Transaction
- **URL**: `/transactions/<transID>`
- **Method**: `DELETE`
- **Description**: Delete a transaction.
- **URL Parameters**: `transID` is the ID of the transaction to delete.
- **Response**: A confirmation message.

### Status Codes

The API returns the following status codes:

- `200 OK`: The request was successful.
- `201 Created`: A new resource was successfully created.
- `400 Bad Request`: The request was invalid or cannot be served.
- `404 Not Found`: The requested resource could not be found.
- `500 Internal Server Error`: A generic error occurred on the server.

## 13) Demonstration of the API in action

Here are the following endpoints for the database API:
```python
### User Endpoints
@app.route('/login', methods=['POST'])
def login():
    # Implement your authentication logic here
    # This is a placeholder for demonstration
    username = request.json.get('username', None)
    password = request.json.get('password', None)
    if username != 'admin' or password != 'password':
        return jsonify({"msg": "Bad username or password"}), 401
    expires = datetime.timedelta(days=7)
    access_token = create_access_token(identity=username, expires_delta=expires)
    return jsonify(access_token=access_token), 200

@app.route('/users', methods=['GET'])
@jwt_required()
def get_users():
    query_params = request.args
    filtered_users = filter_data(users, query_params)
    return jsonify(filtered_users)

@app.route('/users', methods=['POST'])
@jwt_required()
def create_user():
    user = request.json
    users[user['userID']] = user
    return jsonify(user), 201

@app.route('/users/<userID>', methods=['PUT'])
@jwt_required()
def update_user(userID):
    if userID not in users:
        return jsonify({'error': 'User not found'}), 404
    users[userID] = request.json
    return jsonify(users[userID])

@app.route('/users/<userID>', methods=['DELETE'])
@jwt_required()
def delete_user(userID):
    if userID not in users:
        return jsonify({'error': 'User not found'}), 404
    del users[userID]
    return jsonify({'message': 'User deleted successfully'})

### Budget Endpoints
@app.route('/budgets', methods=['GET'])
@jwt_required()
def get_budgets():
    query_params = request.args
    filtered_budgets = filter_data(budgets, query_params)
    return jsonify(filtered_budgets)

@app.route('/budgets', methods=['POST'])
@jwt_required()
def create_budget():
    budget = request.json
    budgets[budget['budgetID']] = budget
    return jsonify(budget), 201

@app.route('/budgets/<budgetID>', methods=['PUT'])
@jwt_required()
def update_budget(budgetID):
    if budgetID not in budgets:
        return jsonify({'error': 'Budget not found'}), 404
    budgets[budgetID] = request.json
    return jsonify(budgets[budgetID])

@app.route('/budgets/<budgetID>', methods=['DELETE'])
@jwt_required()
def delete_budget(budgetID):
    if budgetID not in budgets:
        return jsonify({'error': 'Budget not found'}), 404
    del budgets[budgetID]
    return jsonify({'message': 'Budget deleted successfully'})

### Actuals Endpoints
@app.route('/actuals', methods=['GET'])
@jwt_required()
def get_actuals():
    query_params = request.args
    filtered_actuals = filter_data(actuals, query_params)
    return jsonify(filtered_actuals)

@app.route('/actuals', methods=['POST'])
@jwt_required()
def create_actual():
    actual = request.json
    actuals[actual['actualID']] = actual
    return jsonify(actual), 201

@app.route('/actuals/<actualID>', methods=['PUT'])
@jwt_required()
def update_actual(actualID):
    if actualID not in actuals:
        return jsonify({'error': 'Actual not found'}), 404
    actuals[actualID] = request.json
    return jsonify(actuals[actualID])

@app.route('/actuals/<actualID>', methods=['DELETE'])
@jwt_required()
def delete_actual(actualID):
    if actualID not in actuals:
        return jsonify({'error': 'Actual not found'}), 404
    del actuals[actualID]
    return jsonify({'message': 'Actual deleted successfully'})

### Transactions Endpoints
@app.route('/transactions', methods=['GET'])
@jwt_required()
def get_transactions():
    query_params = request.args
    filtered_transactions = filter_data(transactions, query_params)
    return jsonify(filtered_transactions)

@app.route('/transactions', methods=['POST'])
@jwt_required()
def create_transaction():
    transaction = request.json
    transactions[transaction['transID']] = transaction
    return jsonify(transaction), 201

@app.route('/transactions/<transID>', methods=['PUT'])
@jwt_required()
def update_transaction(transID):
    if transID not in transactions:
        return jsonify({'error': 'Transaction not found'}), 404
    transactions[transID] = request.json
    return jsonify(transactions[transID])

@app.route('/transactions/<transID>', methods=['DELETE'])
@jwt_required()
def delete_transaction(transID):
    if transID not in transactions:
        return jsonify({'error': 'Transaction not found'}), 404
    del transactions[transID]
    return jsonify({'message': 'Transaction deleted successfully'})
```

### Demonstration of Finance Database API

This document demonstrates how to interact with the Finance Database API. We will use `curl` commands for simplicity, but these operations can also be performed using tools like Postman.

#### Prerequisites

Ensure that the API server is running and accessible. The base URL for the API in these examples will be `http://api.yourfinancedb.com/`.

### Create a New User

To create a new user, we send a POST request to the `/users` endpoint with the user's details.

#### Request

```bash
curl -X POST http://api.yourfinancedb.com/users \
  -H "Content-Type: application/json" \
  -d '{"userID": "U123", "name": "John Doe"}'
```

#### Expected Response
```json
{
  "userID": "U123",
  "name": "John Doe"
}
```
#### Postman Response

!["Hi John!"](hijohn!.png)

#### Retrieve All Users
Next, we retrieve a list of all users with a GET request.

#### Request
```bash
curl -X GET http://api.yourfinancedb.com/users
```

#### Expected Response
```json
[
  {
    "userID": "U123",
    "name": "John Doe"
  }
  // ... other users
]
```
#### Postman Response

!["Theres John"](heresjohnny.png)

### Update a User
To update a user's details, we use a PUT request.

#### Request
```bash
curl -X PUT http://api.yourfinancedb.com/users/U123 \
-H "Content-Type: application/json" \
-d '{"name": "Jane Doe"}'
```
#### Expected Response
```json
{
  "userID": "U123",
  "name": "Jane Doe"
}
```
#### Postman Response

!["Hi Jane!"](hijane!.png)

### Delete a User
Finally, to delete a user, we send a DELETE request.

#### Request
```bash
curl -X DELETE http://api.yourfinancedb.com/users/U123
```
#### Expected Response
```json
{
  "message": "User deleted successfully"
}
```

#### Postman Response

!["Bye Jane"](byejane.png)


### Try to delete a user that does not exist

#### Request
```bash
{
    curl -X DELETE http://api.yourfinancedb.com/users/U123
}
```

#### Expected Response
```json
{
  "error": "User not found"
}
```

#### Postman Response

!["Nobody home"](nothere.png)

## 14) Links to source code

Here is the link to the part of the GitHub which contains the DDL source code: 

* <https://github.com/cmsc-vcu/cmsc508-fa2023-prj-personal-financial-budgeting/blob/main/reports/deliver7/deliver7-ddl.sql>

Here is the link to the part of the GitHub which contains the API source code:

* <https://github.com/cmsc-vcu/cmsc508-fa2023-prj-personal-financial-budgeting/tree/main/src/api>

## 15) Future considerations

For future developments, there are a couple of things that we would add for users who utilize the database. The most important one would be a front end UI to allow people to see finances in a better way. The following are a couple of other things that could be done in the future:

1. User Interface Development
Develop a user-friendly web application interface for intuitive interaction with the database.

2. Enhanced Data Visualization
Implement advanced data visualization tools, such as interactive charts and graphs, to understand the user's financial situation better.

3. Machine Learning for Financial Insights
Incorporate some sort of machine learning algorith to offer personalized financial advice and predictive analytics.

4. Integration with Financial Institutions
Automate data entry by integrating with banks for real-time transaction data feeds, seems a bit complicated, but would be super useful if we were to create an application for budgeting.

5. Security Enhancements
Enhance security features with robust encryption, having secure API endpoints, and implementing unique authentication mechanisms.

6. User Customization and Settings
Allow users to set personal financial goals, customize budget categories, and receive alerts on their personal phones.

7. Utilizing a Mobile App for Responsiveness and Cross-Platform Compatibility
Ensure the database behaves well with an application that is responsive and compatible across various devices and platforms.

8. Scalability Improvements
Optimize for scalability with cloud hosting solutions and efficient data processing algorithms.

10. Compliance and Regulation
Ensure compliance with financial regulations and data protection laws so all parties are safe when utilizing the services.