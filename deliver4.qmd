---
title: Deliverable 4 - Database Design (Phase 1)
date: October 15, 2023
author: Bryan Montecino & Corbin Nash
format:
    html:
        theme: pulse
        toc: true
        embed-resources: true
#
# To change themes, see: https://quarto.org/docs/output-formats/html-themes.html
#
---

# GitHub Repository

* <https://github.com/cmsc-vcu/cmsc508-fa2023-prj-personal-financial-budgeting>

Access to the repository to see code and commits.

# Project overview and key deliverables

1) Our project centers on developing a user-friendly database system that empowers individuals to take control of their personal finances, offering tools for income tracking, expense management and budget planning.
2) A bulleted list of:
    * URL to your pitch video: <https://vcu.zoom.us/rec/share/-nhA8wBIFG11yaFMcAL-boD81VZWKOAI2_CDKKjJjZZTUlzsKFVpvNFLB5OnkI53.XNolZw6VAD-LR4Go>
    * URL to your design video (Task 12):
    * URL to your GITHUB repository: <https://github.com/cmsc-vcu/cmsc508-fa2023-prj-personal-financial-budgeting/tree/main>

# Problem description

## 1) Problem domain 
Problem domain is finance management, where the project aims to assist users in the management of their personal finances. The project will keep track of the sources of a user's income (such as income from a job, side hustles, or gifts) and expenses (such as groceries, hobbies, and entertainment). The project will allow the user to easily set a budget, and compare how much they would like to keep each month compared to expected income and spending. Overall it addresses a crucial aspect of people's lives by providing a tool to effectively manage personal finance, making it a valuable resource for users seeking financial stability and control.

## 2) Need
The development of this database is necessary to provide users with a reliable, secure and scalable platform to manage their finances effectively. Along with helping to budget, it would help to reduce stress that comes from managing money. It will offer a structured and streamlined approach to budgeting, expense tracking, and income management, ultimately helping users gain control over their financial well-being and work towards their financial goals.

## 3) Context, scope and perspective
Anyone can use this database to help manage financials, though it will be most helpful for those with an active income. It will represent the perspective of the user, providing a user-friendly interface to input and access financial data easily.

## 4) User roles and use cases

#### User (Individual User)
Needs
: 
* Manage their personal finances, including income and expenses.
* Set and customize budgets.
* Track financial progress and view insights.

Use Cases
: 
* Log in to the system to access their financial dashboard.
* Input income and expense data, categorize transactions, and set budgets.
* View financial summaries, expense breakdowns, and progress reports.
* Make adjustments to their budget based on the provided information.

#### Administrator
Needs
: * Manage the technical aspects of the database.
* Monitor system performance.
* Ensure data security and compliance.

Use Cases
: * Perform routine database maintenance and backup tasks.
* Monitor system performance and address any technical issues.
* Manage user access and permissions.
* Ensure data privacy and security compliance

#### Bank (External Data Retrieval)
Needs
: * Access transaction data for account holders who have given permission.
Use Cases
:
* Connect to the database through secure APIs or integration methods.
* Retrieve transaction data for account holders who have authorized access.
* Update the database with the latest financial data for mutual customers.

#### Financial Advisor (Upon Request)
Needs
: * Access to multiple client accounts.
* Monitor and provide financial advice to clients.
* Generate financial reports for clients.

Use Cases
: * Log in to a dashboard with access to all client accounts.
* Review and analyze client financial data.
* Provide financial recommendations and set up budgets for clients.
* Generate reports to discuss with clients during financial consultations.

## 5) Security and Privacy
User authentication
: Implementing user identity verification through strong user authentication methods, such as username and password combinations, two-factor authentication (2FA), or biometric authentication, to ensure that only authorized users can access the system.

Data Encryption
: 
Utilize secure communication protocols (such as HTTPS) to encrypt data transmitted between the user's device and the database server to prevent interception.
Encrypt sensitive data stored in the database to protect it from unauthorized access in case of a breach or physical server compromise

Access Controls
: Role-Based Access Control (RBAC): Implement to define and enforce user roles and their associated permissions. Users should only have access to the parts of the database that are relevant to their role.

Data Segmentation
: Segregate financial data, ensuring that users can only access their own data. This prevents users from viewing or modifying others' financial information.
Password Policies: Enforce strong password policies, regular password changes and complexity requirements.

*All these items above guide the database design, the data to be collected, how it will be stored, who has access to it, and how it will be used to support decision making.*

# Database design

## 6) Entity-relationship diagram (ERD) 
```{dot}
graph ER {
    layout=neato;
    node [shape=box]; User, Budget, Actuals, Transaction
    node [shape=ellipse]; userID, budgetID, expectedExpense, expectedIncome, difference, transactionID, realExpense, realIncome, comparison, source
    node [shape=diamond,style=filled,color=lightgrey]; manages, compares_to, consists_of, creates

    User -- creates [label = "1",len=1.3]
    User -- manages [label = "1"]    
    Budget -- manages [label = "n",len=1.3]
    Budget -- compares_to [label = "1",len=1.3]
    Actuals -- compares_to [label = "1", len=1.3]
    Actuals -- consists_of [label = "1"]
    Transaction -- consists_of [label = "n",len=1.4]
    Transaction -- creates [label = "n",len=1.3]

    User -- userID

    Budget -- budgetID [len=1.5]
    Budget -- expectedExpense [len=1.5]
    Budget -- expectedIncome [len=1.5]

    Actuals -- realExpense [len=1.5]
    Actuals -- realIncome[len=1.25]
    Actuals -- comparison [len=1.5]

    Transaction -- source [len=1.4]
    Transaction -- transactionID [len=1.4]
    Transaction -- difference [len=1.4]
}
```

```{mermaid}
erDiagram
USER ||--|| BUDGET: MANAGES
USER ||--o{ TRANSACTION: CREATES
TRANSACTION }|--|| ACTUALS: ADMINISTERS
ACTUALS ||--|| BUDGET: COMPARES_TO


USER {
string userID
string budget
string name
string transaction
}
BUDGET {
string budgetID
double pricegain
string source
string actual
string timeperiod
}
ACTUALS {
string actualID
string transaction
string budget
string timeperiod
}
TRANSACTION {
string transID
double pricegain
string source
string actual
string date
}
```

#### Relationship of User to Budget: 1:many
Having the User - Budget relation be a *1:many* relationship means that if a group were to use this database to manage expenses, they would need to be under a shared user. 

* This means there would be no way to tell which member of the group created each transaction. This does however simplify the database, and as this is a personal budget manager, I would consider a group using the database outside the scope of our current project.

## 7) Relational schemas
Listing of relations, their attributes, types, domain, and constraints, identification of the primary key and foreign keys and other constraints.

* User Relation:

| Attribute   | Type   | Domain      | Constraints                 | Primary key | Foreign key |
|-------------|--------|-------------|-----------------------------|-------------|-------------|
| userID      | String | All strings | Must not be null            | yes         | no          |
| budget      | String | All strings | Must not have duplicate IDs | no          | yes         |
| name        | String | All strings | Must not be null            | no          | no          |
| transaction | String | All Strings | Must not have duplicate IDs | no          | yes         |

* Budget Relation:

| Attribute  | Type   | Domain                                        | Constraints                 | Primary key | Foreign key |
|------------|--------|-----------------------------------------------|-----------------------------|-------------|-------------|
| budgetID   | String | All strings                                   | must not be null            | yes         | no          |
| Price/Gain | Double | All real numbers with no more than 2 decimals | none                        | no          | no          |
| Source     | String | One of the following: Entertainment, Transportation, Necessities, Medical, Job, Gifts, Side Hustle, or Other | must not be null | no | no |
| Actual     | String | All strings                                   | must not have duplicate IDs | no          | yes         |
| TimePeriod | String | A string consisting of either a range of dates: “mm/dd/yy - mm/dd/yy,” or a discrete amount of time ie “1 month” | none | no | no |

* Actual Relation:

| Attribute   | Type   | Domain                                        | Constraints                 | Primary key | Foreign key |
|-------------|--------|-----------------------------------------------|-----------------------------|-------------|-------------|
| actualID    | String | All strings                                   | must not be null            | yes         | no          |
| transaction | String | All strings                                   | must not have duplicate Ids | no          | yes         |
| budget      | String | All strings                                   | must not have duplicate Ids | no          | yes         |
| TimePeriod  | String | A string consisting of either a range of dates: “mm/dd/yy - mm/dd/yy,” or a discrete amount of time ie “1 month” | none | no | no |

* Transaction Relation:

| Attribute  | Type   | Domain                                        | Constraints                 | Primary key | Foreign key |
|------------|--------|-----------------------------------------------|-----------------------------|-------------|-------------|
| transID    | String | All strings                                   | must not be null            | yes         | no          |
| Price/Gain | Double | All real numbers with no more than 2 decimals | none                        | no          | no          |
| Source     | String | One of the following: Entertainment, Transportation, Necessities, Medical, Job, Gifts, Side Hustle, or Other | must not be null | no | no |
| Actual     | String | All strings                                   | must not have duplicate IDs | no          | yes         |
| Date       | String | A string consisting of a discrete date: “mm/dd/yy” | none                   | no           | no         |

## 8) Functional Dependencies and Normalization

User
: The only FD here is userID -> name. To get this relation into BCNF, we would need 2 relations: one mapping userID -> name, and the other with userID, transaction, and budget

Budget
: There is only one FD here again and that is Source -> Price/Gain. For BCNF we would need a relation with Source -> Price/Gain, and another with BudgetID, Source, Actual, TimePeriod

Transaction
: This relation has no FDs and is already in BCNF with a primary key of TransID

Actual
: This transaction also has no FDs and is already in BCNF with a primary key of ActualID

## 9) Specific queries
Given the context, scope, and perspective, the team came up with 20 distinct questions that the database can help answer.

1) Display the source I spent the most money on
2) Display where I earned the most money
3) What is the difference between my budget and what I actually earned/spent
4) On what day of the week do I spend the most money
5) On average, how much money do I make outside of my main job per day
6) How much money did I make/spent on gifts this past Christmas
7) Display the difference between how much I made and how much I spent this past year
8) Display the difference between what I spent this week and how much I plan to spend next week
9) On average, how long do I go between spending medical bills
10) What is the difference between what I spend on transportation and what I earn on work days
11) What was the difference between all expenses, minus gifts and entertainment, and all sources of income this past month
12) What is the average difference between what I plan to spend and what I actually spend
13) What is the source with the biggest difference between actual and budget
14) What is the difference between what I spent and what I earned last month
15) What month this past year did I have the largest difference between what I earned and what I spent
16) On average, what week of the year do I have the largest negative difference between budget and actual
17) What is the longest time period I was able to keep on budget or better
18) How many monetary gifts did I receive this past holiday season
19) What is the average number of the other sources
20) How large is the difference between my current budget and my actual

#### Queries with relational algebra:

* Query 1: Retrieve User's Budgets
    
    π budget (σ userID = 'U1', User)

* Query 2: List All Transactions for a Specific User

    π transaction (σ userID = 'U3', User)

* Query 3: Calculate Total Price/Gain for a Budget

    
    ∑ price/gain (σ BudgetID = 'B2', Budget)

* Query 4: Compare Budgeted vs. Actual Expenses for a Specific Budget

    π budgetID, Source, Price/Gain, Actual (σ BudgetID = 'B4', Budget)

* Query 5: Find Transactions Above a Certain Amount for a User

    π transaction, price/gain (σ userID = 'U2' ∧ price/gain > 100, User ⨝ Transaction)

* Query 6: Retrieve Budgets with Specific Time Periods

    π BudgetID, TimePeriod (σ TimePeriod = '2 months', Budget)

* Query 7: Determine Total Income for a User in a Year

    ∑ price/gain (σ userID = 'U4' ∧ EXTRACT(Year FROM Date) = 2023, Transaction)

* Query 8: Find Largest Expense Category in a Budget

    MAX(price/gain) (σ BudgetID = 'B1' ∧ source IN { 'Entertainment', 'Transportation', 'Necessities', 'Medical', 'Job', 'Gifts', 'Side Hustle', 'Other' }, Budget)

* Query 9: Retrieve Transactions from a Specific Date for a User

    π transaction, Date (σ userID = 'U5' ∧ Date = '2023-10-17', User ⨝ Transaction)

* Query 10: List Transactions Categorized as 'Entertainment' for a User

    π transaction, source (σ userID = 'U1' ∧ source = 'Entertainment', User ⨝ Transaction)

* Query 11: Calculate Average Monthly Income for a User

    AVG(price/gain) (σ userID = 'U3' ∧ EXTRACT(Month FROM Date) = 10, Transaction)

* Query 12: Retrieve Transactions Below a Certain Amount in a Budget

    π transaction, price/gain (σ BudgetID = 'B6' ∧ price/gain < 200, Budget ⨝ Transaction)

* Query 13: Find Budgets Exceeded by Actual Expenses for a User

    π BudgetID, Source (σ userID = 'U2' ∧ Price/Gain < Actual, Budget)

* Query 14: Retrieve Financial Advisor's Clients

    π name (σ advisorID IS NOT NULL, User)

* Query 15: Calculate Total Expenses by Transaction Category for a User

    ∑ price/gain (σ userID = 'U3' ∧ source IN { 'Entertainment', 'Transportation', 'Necessities', 'Medical', 'Job', 'Gifts', 'Side Hustle', 'Other' }, Transaction)

* Query 16: Retrieve All Transactions from a Specific Bank for a User

    π transaction, source (σ userID = 'U4' ∧ source = 'Bank', User ⨝ Transaction)

* Query 17: List Transactions Made on a Specific Date for a User

    π transaction, Date (σ userID = 'U1' ∧ Date = '2023-10-03', User ⨝ Transaction)

* Query 18: Retrieve Monthly Expenses in Excess of Budget for a User

    π budgetID, Price/Gain, Actual (σ userID = 'U2' ∧ EXTRACT(Month FROM Date) = 10, Budget ⨝ Transaction)

* Query 19: Calculate Average Monthly Expense for a User

    AVG(price/gain) (σ userID = 'U5' ∧ EXTRACT(Month FROM Date) = 10, Transaction)

* Query 20: Retrieve Transaction History from a Specific Bank for a User

    π transaction, Date (σ userID = 'U4' ∧ source = 'Bank', User ⨝ Transaction)

## 10) Sample Data
Sample data for each relation your design documented above

* User Relation:

| userID | budget    | name           | transaction  |
|--------|-----------|----------------|--------------|
| U1     | B1, B2    | John Doe       | T1, T2, T3   |
| U2     | B3        | Jane Smith     | T4, T5       |
| U3     | B4, B5    | Robert Johnson | T6, T7       |
| U4     | B6, B7    | Emily Brown    | T8, T9       |
| U5     | B8, B9    | Michael Lee    | T10, T11     |

* Budget Relation:

| BudgetID | Price/Gain | Source        | Actual         | TimePeriod |
|----------|------------|---------------|----------------|------------|
| B1       | 3000.50    | Job           | A1, A2, A3     | 1 month    |
| B2       | 150.00     | Gifts         | A4, A5, A6     | 2 months   |
| B3       | 500.75     | Side Hustle   | A7, A8, A9     | 3 months   |
| B4       | 1200.25    | Entertainment  | A10, A11, A12 | 1 month    |
| B5       | 600.00     | Transportation | A13, A14, A15 | 2 months   |
| B6       | 2500.00    | Necessities   | A16, A17, A18 | 3 months   |
| B7       | 750.50     | Medical       | A19, A20, A21 | 1 month    |
| B8       | 400.75     | Job           | A22, A23, A24 | 2 months   |
| B9       | 100.00     | Entertainment  | A25, A26, A27 | 3 months   |

* Actual Relation:

| ActualID | Transaction | Budget | TimePeriod |
|----------|-------------|--------|------------|
| A1       | T1, T2      | B1     | 1 month    |
| A2       | T3, T4      | B2     | 2 months   |
| A3       | T5, T6      | B3     | 3 months   |
| A4       | T7, T8      | B4     | 1 month    |
| A5       | T9, T10     | B5     | 2 months   |
| A6       | T11, T12    | B6     | 3 months   |
| A7       | T13, T14    | B7     | 1 month    |
| A8       | T15, T16    | B8     | 2 months   |
| A9       | T17, T18    | B9     | 3 months   |

* Transaction Relation:

| TransID | Price/Gain | Source      | Actual         | Date       |
|---------|------------|-------------|----------------|------------|
| T1      | 100.50     | Groceries   | A1, A2, A3     | 2023-10-01 |
| T2      | 50.00      | Entertainment | A4, A5, A6   | 2023-10-03 |
| T3      | 75.25      | Transportation | A7, A8, A9 | 2023-10-05 |
| T4      | 120.00     | Hobbies      | A10, A11, A12  | 2023-10-07 |
| T5      | 40.50      | Groceries   | A13, A14, A15  | 2023-10-09 |
| T6      | 20.00      | Entertainment | A16, A17, A18 | 2023-10-11 |
| T7      | 150.75     | Medical     | A19, A20, A21  | 2023-10-13 |
| T8      | 300.00     | Groceries   | A22, A23, A24  | 2023-10-15 |
| T9      | 50.50      | Hobbies      | A25, A26, A27  | 2023-10-17 |
| T10     | 65.00      | Transportation | A28, A29, A30 | 2023-10-19 |

## 11) Draft Project schedule
Final project due by December 12,this report is due October 13.

- What needs to happen between now and then to ensure that you get this whole thing done? 
```{mermaid}
gantt
  dateFormat YYYY-MM-DD
  title Financial Database Project Schedule
  Initial milestone:done, milestone, m1, 2023-08-22, 2m
  section Phase 1
  Student introductions:done, a1, 2023-08-22, 2023-08-23
  Team formation:done, a2, 2023-08-23, 2023-08-27
  Team setup and topic submission:done, a3, 2023-09-09, 2023-09-15
  Phase 1 Submission:active, a4, 2023-10-09, 2023-10-15
  Project status report 1":active a5, 2023-10-20, 2023-10-30
```

```{mermaid}
gantt
  dateFormat YYYY-MM-DD
  title Financial Database Project Schedule
  section Development
  Choose database management system:active, 2023-10-15, 2023-10-20
  Build the database:active, 2023-10-20, 2023-10-25
  Develop the user interface for budgeting:active, 2023-10-25, 2023-11-05

  section Testing
  Implement data input and validation:active, 2023-11-05, 2023-11-10
  Conduct unit testing:active, 2023-11-10, 2023-11-20
  Perform integration testing:active, 2023-11-30

  section User Training
  Prepare user manuals and documentation :active, 2023-11-30, 2023-12-05

  section Deployment
  Prepare the database for production use:active, 2023-12-05, 2023-12-10
  Deploy the system to the production environment :done, 2023-12-09

  section Project Completion
  Submit the Phase 2 submission:active, 2023-12-11,2023-12-12

  Final milestone:active, milestone, m1, 2023-12-13, 2m
```

